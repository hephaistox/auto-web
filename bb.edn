{:deps {io.github.hephaistox/auto-build
          {:git/sha "ce9525bd238ae0a8fcc4b6a82a2987cefc1ab5ff"}},
 :paths ["src"],
 :tasks
   {-base-deps {:doc "Dependencies for a task using bb"},
    :init (do (def ^:dynamic exit System/exit)),
    :requires [;;NOTE Should be as small as possible to ensure `lconnect`
               ;;can start whatever the state of the code is.
               [auto-build.os.exit-codes]],
    bp {:doc "Before push",
        :task (binding [exit (fn [exit-code & _]
                               (when-not (zero? exit-code) exit-code))]
                (-> (or (run 'format)
                        (run 'lint)
                        (binding [*command-line-args* (conj *command-line-args*
                                                            "all")]
                          (run 'clj-test))
                        (binding [*command-line-args* (conj *command-line-args*
                                                            "all")]
                          (run 'cljs-test))
                        auto-build.os.exit-codes/ok)
                    System/exit))},
    clj-test {:doc "Test with clj",
              :requires [[auto-build.tasks.clj-test :as build-clj-test]
                         [auto-build.echo :refer [level1-header]]],
              :task (some->> ["test-clj"]
                             (build-clj-test/clj-test level1-header
                                                      "."
                                                      "clj-test-runner"
                                                      (current-task))
                             exit)},
    cljs-test {:doc "Test with cljs",
               :requires [[auto-build.tasks.cljs-test :as build-cljs-test]
                          [auto-build.echo :refer [level1-header]]],
               :task (some->> ["ltest"]
                              (build-cljs-test/node-test level1-header
                                                         "."
                                                         (current-task))
                              exit)},
    deploy {:doc "Deploy",
            :requires [[auto-build.tasks.deploy :as task-deploy]
                       [auto-build.echo :refer [level1-header]]],
            :task (some-> (task-deploy/deploy level1-header "." (current-task))
                          exit)},
    docs {:doc "Docs",
          :requires [[auto-build.tasks.docs :as build-docs]
                     [auto-build.echo :refer [level1-header]]],
          :task (some->
                  (build-docs/docs level1-header "." (current-task) "gh-pages")
                  exit)},
    format {:doc "Format",
            :requires [[auto-build.tasks.formatting :as task-format]
                       [auto-build.echo :refer [level1-header]]],
            :task (some-> (task-format/format level1-header "." (current-task))
                          exit)},
    heph-info {:doc "Hephaistox project info",
               :extra-paths ["env/dev/resources"],
               :requires [[auto-build.tasks.heph-info :as heph-info]
                          [auto-build.echo :refer [level1-header]]],
               :task (some-> (heph-info/heph-info level1-header (current-task))
                             exit)},
    lint {:doc "Lint",
          :requires [[auto-build.tasks.lint :as task-lint]
                     [auto-build.echo :refer [level1-header]]],
          :task
            (some->
              (task-lint/lint level1-header ["src" "test"] "." (current-task))
              exit)},
    repl {:doc "Clojure repl",
          :override-builtin true,
          :requires [[auto-build.tasks.repl :as build-repl]
                     [auto-build.echo :refer [level1-header]]],
          :task (some-> (build-repl/repl level1-header "." (current-task))
                        exit)}}}
